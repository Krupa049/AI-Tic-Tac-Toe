<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Tic-Tac-Toe</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
        }

        .game {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .board {
            display: grid;
            grid-template-columns: repeat(3, 100px);
            grid-template-rows: repeat(3, 100px);
            gap: 5px;
        }

        .cell {
            width: 100px;
            height: 100px;
            background-color: lightgray;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2em;
            font-weight: bold;
        }

        .message {
            margin-top: 20px;
            font-size: 1.5em;
        }

        .reset {
            margin-top: 10px;
            font-size: 1em;
            padding: 10px 20px;
        }
    </style>
</head>
<body>
    <div class="game">
        <div class="board">
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
            <div class="cell" data-cell></div>
        </div>
        <div class="message"></div>
        <button class="reset" onclick="resetGame()">Reset Game</button>
    </div>
    <script>
        const cells = document.querySelectorAll('[data-cell]');
        const messageElement = document.querySelector('.message');

        const human = 'X';
        const ai = 'O';

        function aiMove() {
            let bestScore = -Infinity;
            let move;
            cells.forEach((cell, i) => {
                if (cell.textContent === '') {
                    cell.textContent = ai;
                    let score = minimax(cells, 0, false);
                    cell.textContent = '';
                    if (score > bestScore) {
                        bestScore = score;
                        move = i;
                    }
                }
            });
            if (move !== undefined) {
                cells[move].textContent = ai;
            }
            if (checkWinner(ai) || isDraw()) {
                endGame();
            }
        }

        function minimax(board, depth, isMaximizing) {
            if (checkWinner(human)) {
                return -10;
            }
            if (checkWinner(ai)) {
                return 10;
            }
            if (isDraw()) {
                return 0;
            }

            if (isMaximizing) {
                let bestScore = -Infinity;
                board.forEach((cell, i) => {
                    if (cell.textContent === '') {
                        cell.textContent = ai;
                        let score = minimax(board, depth + 1, false);
                        cell.textContent = '';
                        bestScore = Math.max(score, bestScore);
                    }
                });
                return bestScore;
            } else {
                let bestScore = Infinity;
                board.forEach((cell, i) => {
                    if (cell.textContent === '') {
                        cell.textContent = human;
                        let score = minimax(board, depth + 1, true);
                        cell.textContent = '';
                        bestScore = Math.min(score, bestScore);
                    }
                });
                return bestScore;
            }
        }

        cells.forEach(cell => {
            cell.addEventListener('click', handleCellClick);
        });

        function handleCellClick(event) {
            const cell = event.target;
            if (cell.textContent !== '') return;

            cell.textContent = human;
            if (checkWinner(human) || isDraw()) {
                endGame();
            } else {
                aiMove();
            }
        }

        function resetGame() {
            cells.forEach(cell => {
                cell.textContent = '';
            });
            messageElement.textContent = '';
            setTimeout(aiMove, 10);
        }

        function checkWinner(player) {
            const winningCombinations = [
                [0, 1, 2],
                [3, 4, 5],
                [6, 7, 8],
                [0, 3, 6],
                [1, 4, 7],
                [2, 5, 8],
                [0, 4, 8],
                [2, 4, 6]
            ];
            return winningCombinations.some(combination => {
                return combination.every(index => {
                    return cells[index].textContent === player;
                });
            });
        }

        function isDraw() {
            return Array.from(cells).every(cell => {
                return cell.textContent !== '';
            });
        }

        function endGame() {
            if (checkWinner(human)) {
                messageElement.textContent = `Player ${human} wins!`;
            } else if (checkWinner(ai)) {
                messageElement.textContent = `Player ${ai} wins!`;
            } else {
                messageElement.textContent = 'It\'s a draw!';
            }
        }

        aiMove();
    </script>
</body>
</html>
