def initialize_board():
    return [[" " for _ in range(3)] for _ in range(3)]

def display_board(board):
    for row in board:
        print("|".join(row))
        print("-----" * len(row))

def get_player_input(board, player):
    while True:
        try:
            position = int(input(f"Player {player}, enter your move (1-9): ")) - 1
            row, col = position // 3, position % 3
            if board[row][col] == " ":
                return row, col
            else:
                print("Invalid move. The cell is already occupied.")
        except (ValueError, IndexError):
            print("Invalid input. Please enter a number between 1 and 9.")

def check_winner(board, player):
    for row in board:
        if all(cell == player for cell in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    return all(cell != " " for row in board for cell in row)

def minimax(board, depth, maximizing_player):
    if check_winner(board, "O"):
        return -1
    if check_winner(board, "X"):
        return 1
    if is_draw(board):
        return 0

    if maximizing_player:
        max_eval = float("-inf")
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "X"
                    eval = minimax(board, depth + 1, False)
                    board[row][col] = " "
                    max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = float("inf")
        for row in range(3):
            for col in range(3):
                if board[row][col] == " ":
                    board[row][col] = "O"
                    eval = minimax(board, depth + 1, True)
                    board[row][col] = " "
                    min_eval = min(min_eval, eval)
        return min_eval

def best_move(board):
    max_eval = float("-inf")
    move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == " ":
                board[row][col] = "X"
                eval = minimax(board, 0, False)
                board[row][col] = " "
                if eval > max_eval:
                    max_eval = eval
                    move = (row, col)
    return move

def main():
    board = initialize_board()
    current_player = "O"

    while not check_winner(board, "O") and not check_winner(board, "X") and not is_draw(board):
        display_board(board)

        if current_player == "O":
            row, col = get_player_input(board, current_player)
        else:
            row, col = best_move(board)

        board[row][col] = current_player
        current_player = "X" if current_player == "O" else "O"

    display_board(board)

    if check_winner(board, "O"):
        print("Player O wins!")
    elif check_winner(board, "X"):
        print("Player X (AI) wins!")
    else:
        print("It's a draw!")
if __name__ == "__main__":
    main()
